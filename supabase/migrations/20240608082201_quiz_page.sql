drop view if exists "public"."random_knowledge_base";

drop view if exists "public"."subject_view";

drop view if exists "public"."topic_view";

create table "public"."quiz" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text not null,
    "updated_at" timestamp with time zone not null default now(),
    "creator_id" uuid not null,
    "is_public" boolean not null default false,
    "access_code" text,
    "has_accessibility_constrain" boolean not null default false,
    "accessible_from" timestamp with time zone not null default now(),
    "accessible_till" timestamp with time zone not null default now(),
    "has_time_limit" boolean not null default false,
    "time_limit_in_minutes" integer default 30,
    "topic_id" bigint,
    "subject_id" bigint,
    "is_protected" boolean not null default false
);


alter table "public"."quiz" enable row level security;

alter table "public"."knowledge_base" drop column "examples";

alter table "public"."knowledge_base" drop column "grammar";

alter table "public"."knowledge_base" drop column "options";

alter table "public"."subject" drop column "public";

alter table "public"."topic" drop column "public";

CREATE UNIQUE INDEX quiz_pkey ON public.quiz USING btree (id);

alter table "public"."quiz" add constraint "quiz_pkey" PRIMARY KEY using index "quiz_pkey";

alter table "public"."quiz" add constraint "quiz_creator_id_fkey" FOREIGN KEY (creator_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."quiz" validate constraint "quiz_creator_id_fkey";

alter table "public"."quiz" add constraint "quiz_subject_id_fkey" FOREIGN KEY (subject_id) REFERENCES subject(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."quiz" validate constraint "quiz_subject_id_fkey";

alter table "public"."quiz" add constraint "quiz_topic_id_fkey" FOREIGN KEY (topic_id) REFERENCES topic(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."quiz" validate constraint "quiz_topic_id_fkey";

create or replace view "public"."quiz_view" as  SELECT q.id,
    q.created_at,
    q.updated_at,
    q.title,
    q.description,
    q.creator_id,
    q.is_protected,
    q.is_public,
    q.has_accessibility_constrain,
    q.accessible_from,
    q.accessible_till,
    q.has_time_limit,
    q.time_limit_in_minutes,
    q.topic_id,
    q.subject_id,
    p.first_name,
    p.last_name,
    t.title AS topic_title,
    s.title AS subject_title
   FROM (((quiz q
     LEFT JOIN profile p ON ((q.creator_id = p.id)))
     LEFT JOIN topic t ON ((t.id = q.topic_id)))
     LEFT JOIN subject s ON ((s.id = q.subject_id)));


create or replace view "public"."random_knowledge_base" as  SELECT d.id,
    d.created_at,
    d.question,
    d.answer,
    d.hint,
    d.user_id,
    d.topic_id,
    a.subject_id
   FROM (knowledge_base d
     JOIN ( SELECT t.id AS topic_id_main,
            t.subject_id
           FROM (topic t
             JOIN subject l ON ((t.subject_id = l.id)))) a ON ((a.topic_id_main = d.topic_id)))
  ORDER BY (random());


create or replace view "public"."subject_view" as  SELECT s.id,
    s.created_at,
    s.title,
    s.description,
    s.user_id,
    s.is_public,
    s.updated_at,
    p.first_name
   FROM (subject s
     LEFT JOIN profile p ON ((s.user_id = p.id)))
  ORDER BY s.created_at DESC;


create or replace view "public"."topic_view" as  SELECT t.id,
    t.created_at,
    t.subject_id,
    t.title,
    t.description,
    t.user_id,
    t.is_public,
    t.updated_at,
    p.first_name,
    s.title AS subject_name
   FROM ((topic t
     LEFT JOIN profile p ON ((t.user_id = p.id)))
     LEFT JOIN subject s ON ((t.subject_id = s.id)))
  ORDER BY s.created_at DESC;


grant delete on table "public"."quiz" to "anon";

grant insert on table "public"."quiz" to "anon";

grant references on table "public"."quiz" to "anon";

grant select on table "public"."quiz" to "anon";

grant trigger on table "public"."quiz" to "anon";

grant truncate on table "public"."quiz" to "anon";

grant update on table "public"."quiz" to "anon";

grant delete on table "public"."quiz" to "authenticated";

grant insert on table "public"."quiz" to "authenticated";

grant references on table "public"."quiz" to "authenticated";

grant select on table "public"."quiz" to "authenticated";

grant trigger on table "public"."quiz" to "authenticated";

grant truncate on table "public"."quiz" to "authenticated";

grant update on table "public"."quiz" to "authenticated";

grant delete on table "public"."quiz" to "service_role";

grant insert on table "public"."quiz" to "service_role";

grant references on table "public"."quiz" to "service_role";

grant select on table "public"."quiz" to "service_role";

grant trigger on table "public"."quiz" to "service_role";

grant truncate on table "public"."quiz" to "service_role";

grant update on table "public"."quiz" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."quiz"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = creator_id));


create policy "Enable insert for authenticated users only"
on "public"."quiz"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."quiz"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for users based on email"
on "public"."quiz"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = creator_id))
with check ((( SELECT auth.uid() AS uid) = creator_id));



